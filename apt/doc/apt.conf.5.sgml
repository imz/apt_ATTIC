<!-- -*- mode: sgml; mode: fold -*- -->
<!doctype refentry PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [

<!ENTITY % aptent SYSTEM "apt.ent">
%aptent;

]>

<refentry>
 &apt-docinfo;
 
 <refmeta>
   <refentrytitle>apt.conf</>
   <manvolnum>5</>
 </refmeta>
 
 <!-- Man page title -->
 <refnamediv>
    <refname>apt.conf</>
    <refpurpose>Configuration file for APT</>
 </refnamediv>
 
 <RefSect1><Title>Description</>
   <para>
   <filename/apt.conf/ is the main configuration file for the APT suite of
   tools, all tools make use of the configuration file and a common command line
   parser to provide a uniform environment. When an APT tool starts up it will
   read the configuration specified by the <envar/APT_CONFIG/ environment 
   variable (if any) and then read the files in <literal/Dir::Etc::Parts/ 
   then read the main configuration file specified by 
   <literal/Dir::Etc::main/ then finally apply the
   command line options to override the configuration directives, possibly 
   loading even more config files.
   </para><para>
   The configuration file is organized in a tree with options organized into
   functional groups. Option specification is given with a double colon
   notation, for instance <literal/APT::Get::Assume-Yes/ is an option within 
   the APT tool group, for the Get tool. Options do not inherit from their 
   parent groups.
   </para><para>
   Syntacticly the configuration language is modeled after what the ISC tools
   such as bind and dhcp use.  Lines starting with
   <literal>//</literal> are treated as comments (ignored).  Each line is of the form
   <literallayout>APT::Get::Assume-Yes "true";</literallayout> The trailing 
   semicolon is required and the quotes are optional. A new scope can be
   opened with curly braces, like:
<informalexample><programlisting>   
APT {
  Get {
    Assume-Yes "true";
    Fix-Broken "true";
  };
};
</programlisting></informalexample>
   with newlines placed to make it more readable. Lists can be created by 
   opening a scope and including a single word enclosed in quotes followed by a 
   semicolon. Multiple entries can be included, each separated by a semicolon.
<informalexample><programlisting>   
DPkg::Pre-Install-Pkgs {"/usr/sbin/dpkg-preconfigure --apt";};
</programlisting></informalexample>
   </para><para>
   In general the sample configuration file in 
   <filename>&docdir;examples/apt.conf</> &configureindex;
   is a good guide for how it should look.
   </para><para>
   Two specials are allowed, <literal/#include/ and <literal/#clear/. 
   <literal/#include/ will include the given file, unless the filename
   ends in a slash, then the whole directory is included.  
   <literal/#clear/ is used to erase a list of names.
   </para><para>
   All of the APT tools take a -o option which allows an arbitrary configuration 
   directive to be specified on the command line. The syntax is a full option
   name (<literal/APT::Get::Assume-Yes/ for instance) followed by an equals
   sign then the new value of the option. Lists can be appended too by adding 
   a trailing :: to the list name.   
   </para>
 </RefSect1>

 <RefSect1><Title>The APT Group</>
   <para>   
   This group of options controls general APT behavior as well as holding the
   options for all of the tools.

   <VariableList>
     <VarListEntry><Term>Architecture</Term>
     <ListItem><Para>
     System Architecture; sets the architecture to use when fetching files and
     parsing package lists. The internal default is the architecture apt was 
     compiled for.
     </Para></ListItem>
     </VarListEntry>
     
     <VarListEntry><Term>Ignore-Hold</Term>
     <ListItem><Para>
     Ignore Held packages; This global option causes the problem resolver to
     ignore held packages in its decision making. 
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>Clean-Installed</Term>
     <ListItem><Para>
     Defaults to on. When turned on the autoclean feature will remove any packages
     which can no longer be downloaded from the cache. If turned off then
     packages that are locally installed are also excluded from cleaning - but
     note that APT provides no direct means to reinstall them.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>Immediate-Configure</Term>
     <ListItem><Para>
     Disable Immediate Configuration; This dangerous option disables some
     of APT's ordering code to cause it to make fewer dpkg calls. Doing
     so may be necessary on some extremely slow single user systems but 
     is very dangerous and may cause package install scripts to fail or worse.
     Use at your own risk.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>Force-LoopBreak</Term>
     <ListItem><Para>
     Never Enable this option unless you -really- know what you are doing. It
     permits APT to temporarily remove an essential package to break a
     Conflicts/Conflicts or Conflicts/Pre-Depend loop between two essential
     packages. SUCH A LOOP SHOULD NEVER EXIST AND IS A GRAVE BUG. This option 
     will work if the essential packages are not tar, gzip, libc, dpkg, bash or
     anything that those packages depend on.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>Cache-Start, Cache-Grow and Cache-Limit</Term>
     <ListItem><Para>APT uses since version 0.7.26 a resizable memory mapped cache file to store the 'available'
     information. <literal/Cache-Start/ acts as a hint to which size the Cache will grow
     and is therefore the amount of memory APT will request at startup. The default value is
     20971520 bytes (~20 MB). Note that these amount of space need to be available for APT
     otherwise it will likely fail ungracefully, so for memory restricted devices these value should
     be lowered while on systems with a lot of configured sources this might be increased.
     <literal/Cache-Grow/ defines in byte with the default of 1048576 (~1 MB) how much
     the Cache size will be increased in the event the space defined by <literal/Cache-Start/
     is not enough. These value will be applied again and again until either the cache is big
     enough to store all information or the size of the cache reaches the <literal/Cache-Limit/
     The default of <literal/Cache-Limit/ is 0 which stands for no limit.
     If <literal/Cache-Grow/ is set to 0 the automatic grow of the cache is disabled.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>Build-Essential</Term>
     <ListItem><Para>
     Defines which package(s) are considered essential build dependencies.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>Get</Term>
     <ListItem><Para>
     The Get subsection controls the &apt-get; tool, please see its
     documentation for more information about the options here.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>Cache</Term>
     <ListItem><Para>
     The Cache subsection controls the &apt-cache; tool, please see its
     documentation for more information about the options here.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>CDROM</Term>
     <ListItem><Para>
     The CDROM subsection controls the &apt-cdrom; tool, please see its
     documentation for more information about the options here.
     </Para></ListItem>
     </VarListEntry>
   </VariableList>
   </para>
 </RefSect1>

 <RefSect1><Title>The Acquire Group</>
   <para>   
   The <literal/Acquire/ group of options controls the download of packages 
   and the URI handlers. 

   <VariableList>
     <VarListEntry><Term>Queue-Mode</Term>
     <ListItem><Para>
     Queuing mode; <literal/Queue-Mode/ can be one of <literal/host/ or 
     <literal/access/ which determines how  APT parallelizes outgoing 
     connections. <literal/host/ means that one connection per target host 
     will be opened, <literal/access/ means that one connection per URI type 
     will be opened.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>Retries</Term>
     <ListItem><Para>
     Number of retries to perform. If this is non-zero APT will retry failed 
     files the given number of times.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>Source-Symlinks</Term>
     <ListItem><Para>
     Use symlinks for source archives. If set to true then source archives will
     be symlinked when possible instead of copying. True is the default
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>http</Term>
     <ListItem><Para>
     HTTP URIs; http::Proxy is the default http proxy to use. It is in the 
     standard form of <literal>http://[[user][:pass]@]host[:port]/</>. Per 
     host proxies can also be specified by using the form 
     <literal/http::Proxy::&lt;host&gt;/ with the special keyword <literal/DIRECT/ 
     meaning to use no proxies. The <envar/http_proxy/ environment variable
     will override all settings.
     </Para><Para>
     Three settings are provided for cache control with HTTP/1.1 compliant 
     proxy caches. <literal/No-Cache/ tells the proxy to not use its cached 
     response under any circumstances, <literal/Max-Age/ is sent only for 
     index files and tells the cache to refresh its object if it is older than 
     the given number of seconds. Debian updates its index files daily so the 
     default is 1 day. <literal/No-Store/ specifies that the cache should never 
     store this request, it is only set for archive files. This may be useful 
     to prevent polluting a proxy cache with very large .deb files. Note: 
     Squid 2.0.2 does not support any of these options.
     </Para><Para>
     The option <literal/timeout/ sets the timeout timer used by the method, 
     this applies to all things including connection timeout and data timeout.
     </Para><Para>
     One setting is provided to control the pipeline depth in cases where the
     remote server is not RFC conforming or buggy (such as Squid 2.0.2)
     <literal/Acquire::http::Pipeline-Depth/ can be a value from 0 to 5 
     indicating how many outstanding requests APT should send. A value of
     zero MUST be specified if the remote host does not properly linger
     on TCP connections - otherwise data corruption will occur. Hosts which
     require this are in violation of RFC 2068.     
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>https</Term>
     <ListItem><Para>
     This method inherits all configuration settings from http method except for
     proxy settings and has some additional settings related to TLS configuration.
     </Para><Para>
     Variable <literal/Acquire::https::CaInfo/ allows setting path to
     certificate bundle file in PEM format to be used instead of system certificate store.
     </Para><Para>
     Variables <literal/Acquire::https::SslCert/ and <literal/Acquire::https::SslKey/
     allow specifying path to client certificate and client certificate key files.
     If such files are specified and present, they'll be used to negotiate connection
     with server.
     </Para><Para>
     Variable <literal/Acquire::https::CrlFile/ allows to specify
     path to custom certificate revocation list file.
     </Para><Para>
     Variable <literal/Acquire::https::Verify-Peer/ allows to disable
     remote server verification if set to false.
     </Para><Para>
     Variable <literal/Acquire::https::Verify-Host/ allows to disable
     verification of remote host's hostname if set to false.
     </Para><Para>
     Variable <literal/Acquire::https::PinnedCert/ allows to specify
     location of pinned certificate file which will be used to compare with
     certificate retrieved from server.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>ftp</Term>
     <ListItem><Para>
     FTP URIs; ftp::Proxy is the default proxy server to use. It is in the 
     standard form of <literal>ftp://[[user][:pass]@]host[:port]/</> and is 
     overridden by the <envar/ftp_proxy/ environment variable. To use a ftp 
     proxy you will have to set the <literal/ftp::ProxyLogin/ script in the 
     configuration file. This entry specifies the commands to send to tell 
     the proxy server what to connect to. Please see 
     &configureindex; for an example of 
     how to do this. The subsitution variables available are 
     <literal/$(PROXY_USER)/, <literal/$(PROXY_PASS)/, <literal/$(SITE_USER)/,
     <literal/$(SITE_PASS)/, <literal/$(SITE)/, and <literal/$(SITE_PORT)/.
     Each is taken from it's respective URI component.
     </Para><Para>
     The option <literal/timeout/ sets the timeout timer used by the method, 
     this applies to all things including connection timeout and data timeout.
     </Para><Para>
     Several settings are provided to control passive mode. Generally it is 
     safe to leave passive mode on, it works in nearly every environment. 
     However some situations require that passive mode be disabled and port 
     mode ftp used instead. This can be done globally, for connections that 
     go through a proxy or for a specific host (See the sample config file 
     for examples)
     </Para><Para>
     It is possible to proxy FTP over HTTP by setting the <envar/ftp_proxy/
     environment variable to a http url - see the discussion of the http method
     above for syntax. You cannot set this in the configuration file and it is
     not recommended to use FTP over HTTP due to its low efficiency.
     </Para><Para>
     The setting <literal/ForceExtended/ controls the use of RFC2428 
     <literal/EPSV/ and <literal/EPRT/ commands. The defaut is false, which means
     these commands are only used if the control connection is IPv6. Setting this
     to true forces their use even on IPv4 connections. Note that most FTP servers
     do not support RFC2428.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>cdrom</Term>
     <ListItem><Para>
     CDROM URIs; the only setting for CDROM URIs is the mount point, 
     <literal/cdrom::Mount/ which must be the mount point for the CDROM drive 
     as specified in <filename>/etc/fstab</>. It is possible to provide 
     alternate mount and unmount commands if your mount point cannot be listed 
     in the fstab (such as an SMB mount and old mount packages). The syntax 
     is to put <literallayout>"/cdrom/"::Mount "foo";</literallayout> within 
     the cdrom block. It is important to have the trailing slash. Unmount 
     commands can be specified using UMount.
     </Para></ListItem>
     </VarListEntry>
   </VariableList>
   </para>
 </RefSect1>

 <RefSect1><Title>Directories</>
   <para>   
   The <literal/Dir::State/ section has directories that pertain to local 
   state information. <literal/lists/ is the directory to place downloaded 
   package lists in and <literal/status/ is the name of the dpkg status file.
   <literal/preferences/ is the name of the APT preferences file.
   <literal/Dir::State/ contains the default directory to prefix on all sub 
   items if they do not start with <filename>/</> or <filename>./</>. 
   </para><para>
   <literal/Dir::Cache/ contains locations pertaining to local cache 
   information, such as the two package caches <literal/srcpkgcache/ and 
   <literal/pkgcache/ as well as the location to place downloaded archives, 
   <literal/Dir::Cache::archives/. Generation of caches can be turned off
   by setting their names to be blank. This will slow down startup but
   save disk space. It is probably prefered to turn off the pkgcache rather
   than the srcpkgcache. Like <literal/Dir::State/ the default
   directory is contained in <literal/Dir::Cache/
   </para><para>
   <literal/Dir::Etc/ contains the location of configuration files, 
   <literal/sourcelist/ gives the location of the sourcelist and 
   <literal/main/ is the default configuration file (setting has no effect,
   unless it is done from the config file specified by 
   <envar/APT_CONFIG/).
   </para><para>
   The <literal/Dir::Parts/ setting reads in all the config fragments in 
   lexical order from the directory specified. After this is done then the
   main config file is loaded.
   </para><para>
   Binary programs are pointed to by <literal/Dir::Bin/. <literal/Dir::Bin::Methods/ 
   specifies the location of the method handlers and <literal/gzip/, 
   <literal/dpkg/, <literal/apt-get/, <literal/dpkg-source/, 
   <literal/dpkg-buildpackage/ and <literal/apt-cache/ specify the location
   of the respective programs.
   </para>
 </RefSect1>
 
 <RefSect1><Title>APT in DSelect</>
   <para>   
   When APT is used as a &dselect; method several configuration directives
   control the default behaviour. These are in the <literal/DSelect/ section.
   
   <VariableList>
     <VarListEntry><Term>Clean</Term>
     <ListItem><Para>
     Cache Clean mode; this value may be one of always, prompt, auto,
     pre-auto and never.  always and prompt will remove all packages from
     the cache after upgrading, prompt (the default) does so conditionally. 
     auto removes only those packages which are no longer downloadable
     (replaced with a new version for instance).  pre-auto performs this
     action before downloading new packages.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>Options</Term>
     <ListItem><Para>
     The contents of this variable is passed to &apt-get; as command line
     options when it is run for the install phase.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>UpdateOptions</Term>
     <ListItem><Para>
     The contents of this variable is passed to &apt-get; as command line
     options when it is run for the update phase.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>PromptAfterUpdate</Term>
     <ListItem><Para>
     If true the [U]pdate operation in &dselect; will always prompt to continue. 
     The default is to prompt only on error.
     </Para></ListItem>
     </VarListEntry>
   </VariableList>
   </para>
 </RefSect1>
 
 <RefSect1><Title>How APT calls dpkg</>
   <para>   
   Several configuration directives control how APT invokes &dpkg;. These are 
   in the <literal/DPkg/ section.

   <VariableList>
     <VarListEntry><Term>Options</Term>
     <ListItem><Para>
     This is a list of options to pass to dpkg. The options must be specified
     using the list notation and each list item is passed as a single argument
     to &dpkg;.
     </Para></ListItem>
     </VarListEntry>
     
     <VarListEntry><Term>Pre-Invoke</Term><Term>Post-Invoke</Term>
     <ListItem><Para>
     This is a list of shell commands to run before/after invoking &dpkg;. 
     Like <literal/Options/ this must be specified in list notation. The 
     commands are invoked in order using <filename>/bin/sh</>, should any 
     fail APT will abort.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>Pre-Install-Pkgs</Term>
     <ListItem><Para>
     This is a list of shell commands to run before invoking dpkg. Like
     <literal/Options/ this must be specified in list notation. The commands
     are invoked in order using <filename>/bin/sh</>, should any fail APT 
     will abort. APT will pass to the commands on standard input the 
     filenames of all .deb files it is going to install, one per line.
     </para><para>
     Version 2 of this protocol dumps more information, including the 
     protocol version, the APT configuration space and the packages, files
     and versions being changed. Version 2 is enabled by setting 
     <literal/DPkg::Tools::Options::cmd::Version/ to 2. <literal/cmd/ is a
     command given to <literal/Pre-Install-Pkgs/.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>Run-Directory</Term>
     <ListItem><Para>
     APT chdirs to this directory before invoking dpkg, the default is 
     <filename>/</>.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>Build-Options</Term>
     <ListItem><Para>
     These options are passed to &dpkg-buildpackage; when compiling packages,
     the default is to disable signing and produce all binaries.
     </Para></ListItem>
     </VarListEntry>
   </VariableList>
   </para>
 </RefSect1>
 
 <RefSect1><Title>Options related to Autoremove</>
   <para>
   Autoremove depends on packages having been marked as either 'auto' or
   'manual' (i.e., either automatically installed by APT to resolve a
   dependency or manually selected for installation).
   There are a few options which configure the marking behaviour.

   <VariableList>
     <VarListEntry><Term>APT::Get::ReInstall::MarkManual</Term>
     <ListItem><Para>
     This is a boolean option with default value <literal/true/. If
     it's set to <literal/true/ then, when APT reinstalls a package (by
     a user's request), it marks this package as manually installed.
     </Para></ListItem>
     </VarListEntry>

     <VarListEntry><Term>APT::Get::Obsoletes::AptMarkInheritanceAuto</Term>
     <ListItem><Para>
     A string option which allows to define the rules of setting the
     value of flag <literal/auto/ when a package is obsoleting and
     replacing another package. Possible values are:
     </para><para>
     <literal/obsoleted/ - if the obsoleted package is marked 'auto',
     the replacing package will be marked 'auto' too, otherwise marked 'manual';
     </para><para>
     <literal/replacing/ - the replacing package gets its mark as usual
     (i.e., if the replacing package is to be marked 'auto', it gets
     this mark without taking the mark of the replaced package into
     account; similarly for 'manual');
     </para><para>
     <literal/at_least_one/ - if the obsoleted package or the
     replacing package is marked 'auto', the replacing package will be
     marked 'auto', otherwise marked 'manual';
     </para><para>
     <literal/all/ - if the obsoleted package and the replacing
     package are both marked 'auto', the replacing package will be
     marked 'auto', otherwise marked 'manual';
     </para><para>
     <literal/never/ - the replacing package is always marked 'manual';
     </para><para>
     <literal/always/ - the replacing package is always marked 'auto';
     </para><para>
     </para><para>
     if some other value is used or if the value is missing, it acts
     as if <literal/all/ was set.
     </Para></ListItem>
     </VarListEntry>
   </VariableList>
   </para>

   <para>
   There is an option which helps to debug the autoremove algorithm

   <VariableList>
     <VarListEntry><Term>Debug::pkgAutoremove::resolveVirtuals</Term>
     <ListItem><Para>
     This is a boolean option with default value <literal/false/. If
     it's set to <literal/true/, when autoremove is checking package
     dependencies, it'll output the information about the process of
     resolving virtual dependencies.
     </Para></ListItem>
     </VarListEntry>
   </VariableList>
   </para>
 </RefSect1>
 
 <RefSect1><Title>Debug Options</>
   <para>   
   Most of the options in the <literal/debug/ section are not interesting to 
   the normal user, however <literal/Debug::pkgProblemResolver/ shows 
   interesting output about the decisions dist-upgrade makes. 
   <literal/Debug::NoLocking/ disables file locking so APT can do some 
   operations as non-root and <literal/Debug::pkgDPkgPM/ will print out the 
   command line for each dpkg invokation. <literal/Debug::IdentCdrom/ will 
   disable the inclusion of statfs data in CDROM IDs.
   </para><para>
   To debug issues related to dynamic memory allocation, options
   <literal/Debug::DynamicMMap::Grow/ and <literal/Debug::DynamicMMap::Allocate/ may be used.
   </para>
 </RefSect1>
 
 <RefSect1><Title>Examples</>
   <para>
   &configureindex; contains a 
   sample configuration file showing the default values for all possible 
   options.
   </para>
 </RefSect1>
 
 <RefSect1><Title>Files</>
   <para>
   <filename>/etc/apt/apt.conf</>
   </para>
 </RefSect1>
 
 <RefSect1><Title>See Also</>
   <para>
   &apt-cache;, &apt-config;<!-- ? reading apt.conf -->, &apt-preferences;.
   </para>
 </RefSect1>

 &manbugs;
 &manauthor;
 
</refentry>

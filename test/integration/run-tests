#!/bin/bash
set -e

FAIL=0
PASS=0
ALL=0

FAILED_TESTS=""
DIR=$(readlink -f $(dirname $0))

# Global parameters which affect the tests (or the framework)
# and must be set before running the tests and using the framework:

# If empty or unset, a temporary dir will be created and then cleaned up.
# Setting this parameter explicitly is useful for debugging.
export APT_TEST_WORKINGDIRECTORY="${APT_TEST_WORKINGDIRECTORY-}"

# arch parameters:

# The arch (the machine arch) as detected by rpm or apt
# (and as expected to appear in the APT conf by default).
#
# If empty, it will be set to a best guessed value.
export APT_TEST_DEFAULT_ARCH="${APT_TEST_DEFAULT_ARCH-}"

# If non-empty, forces a custom --target value to be passed when building pkgs.
# If empty, no --target option will be passed when building pkgs.
export APT_TEST_TARGET="${APT_TEST_TARGET-}"

# The GPG key to apply rpm --import, so that all the tests are run with such db.
# If empty, no GPG key is imported into the db.
export APT_TEST_GPGPUBKEY="${APT_TEST_GPGPUBKEY-}"

# setupenvironment()'s parameters: if non-empty, they override the APT config.
export METHODSDIR="${METHODSDIR-}" # could override Dir::Bin::methods

# generaterepository()'s parameters: if non-empty, they are used; otherwise,
# there are default values in that function definition (in framework).
export GB_REPO_LABEL="${GB_REPO_LABEL-}"
export GB_REPO_DESCRIPTION="${GB_REPO_DESCRIPTION-}"
export GB_REPO_ARCHIVE="${GB_REPO_ARCHIVE-}"
export GB_REPO_CODENAME="${GB_REPO_CODENAME-}"
export GB_REPO_ORIGIN="${GB_REPO_ORIGIN-}"
export GB_REPO_SUITE="${GB_REPO_SUITE-}"
export GB_REPO_VERSION="${GB_REPO_VERSION-}"

# MSGLEVEL and MSGCOLOR parameters:

while [ -n "$1" ]; do
	if [ "$1" = '-q' ]; then
		export MSGLEVEL=2
	elif [ "$1" = '-v' ]; then
		export MSGLEVEL=4
	elif [ "$1" = '--color=no' ]; then
		export MSGCOLOR='NO'
	else
		echo >&2 "WARNING: Unknown parameter »$1« will be ignored"
	fi
	shift
done
export MSGLEVEL="${MSGLEVEL:-3}"

export MSGCOLOR="${MSGCOLOR:-YES}"

if [ "$MSGCOLOR" != 'NO' ]; then
	if [ ! -t 1 ]; then # but check that we output to a terminal
		export MSGCOLOR='NO'
	fi
fi
if [ "$MSGCOLOR" != 'NO' ]; then
	CTEST='\033[1;32m'
	CHIGH='\033[1;35m'
	CRESET='\033[0m'
else
	CTEST=''
	CHIGH=''
	CRESET=''
fi

TOTAL="$(ls $DIR | egrep '^test-' | wc -l)"
for testcase in $(ls $DIR | egrep '^test-'); do
	if [ "$MSGLEVEL" -le 2 ]; then
		printf "($(($ALL+1))/${TOTAL}) ${CTEST}Testcase ${CHIGH}$(basename ${testcase})${CRESET}: "
	else
		printf "${CTEST}Run Testcase ($(($ALL+1))/${TOTAL}) ${CHIGH}$(basename ${testcase})${CRESET}\n"
	fi
	if ! ./${testcase}; then
		FAIL=$((FAIL+1))
		FAILED_TESTS="$FAILED_TESTS $(basename $testcase)"
		echo >&2 "$(basename $testcase) ... FAIL"
	else
		PASS=$((PASS+1))
	fi
	ALL=$((ALL+1))
	if [ "$MSGLEVEL" -le 2 ]; then
		echo
	fi
done

echo >&2 "Statistics: $ALL tests were run: $PASS successfully and $FAIL failed"
if [ -n "$FAILED_TESTS" ]; then
	echo >&2 "Failed tests: $FAILED_TESTS"
else
	echo >&2 'All tests seem to have been run successfully. What could possibly go wrong?'
fi
# ensure we don't overflow
exit $((FAIL <= 255 ? FAIL : 255))

#!/bin/sh -X # no runnable script, just for editors
# set -eu is assumed.
# (Note that in ALT /bin/sh is a bash with a few features turned off.)
# (TODO: make sure that ALT's /bin/sh is enough;
# use the lightweight /bin/sh in the actual test scripts.)
#
# At least the syntax in nginxstart() requires bash >= 4 (&>>).

# Under set -x, don't mess the trace with other commands' output (possibly
# redirected), rather send it directly to the global stderr.
exec 5>&2
BASH_XTRACEFD=5

EXIT_CODE=0

# During the most lifetime of the script (until the exiting traps), this var is
# just used to count the failed tests. Better do this via a dedicated function:
XFAILED=0
one_more_failure() {
	if [ "$APT_TEST_XFAIL" = '' ]; then
		EXIT_CODE=$((EXIT_CODE+1))
	else
		XFAILED=$((XFAILED+1))
	fi
}

# we all like colorful messages
if [ "$MSGCOLOR" != 'NO' ]; then
	if [ ! -t 1 ]; then # but check that we output to a terminal
		export MSGCOLOR='NO'
	fi
fi

CERROR=
CWARNING=
CMSG=
CINFO=
CDEBUG=
CNORMAL=
CDONE=
CPASS=
CFAIL=
CCMD=

if [ "$MSGCOLOR" != 'NO' ]; then
	CERROR="\033[1;31m" # red
	CWARNING="\033[1;33m" # yellow
	CMSG="\033[1;32m" # green
	CINFO="\033[1;96m" # light blue
	CDEBUG="\033[1;94m" # blue
	CNORMAL="\033[0;39m" # default system console color
	CDONE="\033[1;32m" # green
	CPASS="\033[1;32m" # green
	CFAIL="\033[1;31m" # red
	CCMD="\033[1;35m" # pink
fi

msgdie() { printf "${CERROR}E: $1${CNORMAL}\n" >&2; exit 1; }
msgwarn() { printf "${CWARNING}W: $1${CNORMAL}\n" >&2; }
msgmsg() { printf "${CMSG}$1${CNORMAL}\n"; }
msginfo() { printf "${CINFO}I: $1${CNORMAL}\n"; }
msgdebug() { printf "${CDEBUG}D: $1${CNORMAL}\n"; }
msgdone() { printf "${CDONE}DONE${CNORMAL}\n"; }
msgnwarn() { printf "${CWARNING}W: $1${CNORMAL}" >&2; }
msgnmsg() { printf "${CMSG}$1${CNORMAL}"; }
msgninfo() { printf "${CINFO}I: $1${CNORMAL}"; }
msgndebug() { printf "${CDEBUG}D: $1${CNORMAL}"; }
msgtest() {
	while [ $# -gt 0 ]; do
		printf "${CINFO}%s${CCMD} %s${CNORMAL} " "$1" "$(sed -e 's#^apt\([cgfs]\)#apt-\1#' <<<"${2-}")"
		shift
		if [ $# -gt 0 ]; then
			shift
		else
			break
		fi
	done
	printf "${CINFO}…${CNORMAL} "
}
msgpass() { printf "${CPASS}PASS${CNORMAL}\n"; }
msgskip() { printf "${CWARNING}SKIP${CNORMAL}\n" >&2; }
msgfail() {
	if [ $# -gt 0 ]; then printf "${CFAIL}FAIL: $*${CNORMAL}\n" >&2;
	else printf "${CFAIL}FAIL${CNORMAL}\n" >&2; fi
	one_more_failure
}

# enable / disable Debugging
if [ $MSGLEVEL -le 0 ]; then
	# Although this override never happens with nonnegative MSGLEVEL, let's not
	# change the semantics: this msg*() function doesn't just print a message.
	msgdie() { exit 1; }
fi
if [ $MSGLEVEL -le 1 ]; then
	msgwarn() { true; }
	msgnwarn() { true; }
fi
if [ $MSGLEVEL -le 2 ]; then
	msgmsg() { true; }
	msgnmsg() { true; }
	msgtest() { true; }
	msgpass() { printf " ${CPASS}P${CNORMAL}"; }
	msgskip() { printf " ${CWARNING}S${CNORMAL}" >&2; }
	if [ -n "$CFAIL" ]; then
		msgfail() { printf " ${CFAIL}FAIL${CNORMAL}" >&2; one_more_failure; }
	else
		msgfail() { printf ' ###FAILED###' >&2; one_more_failure; }
	fi
fi
if [ $MSGLEVEL -le 3 ]; then
	msginfo() { true; }
	msgninfo() { true; }
fi
if [ $MSGLEVEL -le 4 ]; then
	msgdebug() { true; }
	msgndebug() { true; }
fi
msgdone() {
	if [ "$1" = 'debug' -a $MSGLEVEL -le 4 ] ||
	   [ "$1" = 'info' -a $MSGLEVEL -le 3 ] ||
	   [ "$1" = 'msg' -a $MSGLEVEL -le 2 ] ||
	   [ "$1" = 'warn' -a $MSGLEVEL -le 1 ] ||
	   [ "$1" = 'die' -a $MSGLEVEL -le 0 ]; then
		true;
	else
		printf "${CDONE}DONE${CNORMAL}\n";
	fi
}
getaptconfig() {
	if [ -f ./aptconfig.conf ]; then
            echo './aptconfig.conf'
	elif [ -f ../aptconfig.conf ]; then
            echo '../aptconfig.conf'
        fi
}
runapt() {
	msgdebug "CWD: $PWD"
	msgdebug "Executing: APT_CONFIG=$(getaptconfig) ${CCMD}$*${CDEBUG} "
	local CMD="$1"
	shift
	APT_CONFIG="$(getaptconfig)" $CMD "$@"
}
aptconfig() { runapt apt-config "$@"; }
aptcache() { runapt apt-cache "$@"; }
aptcdrom() { runapt apt-cdrom "${CDROM_OPTS[@]}" "$@"; }
aptget() { runapt apt-get "${CDROM_OPTS[@]}" "$@"; }
aptmark() { runapt apt-mark "$@"; }


exitwithstatus() {
        # error if we about to overflow, but ...
        #   "255 failures ought to be enough for everybody"
        if [ $EXIT_CODE -gt 254 ]; then
            msgdie "Total failure count $EXIT_CODE too big"
        fi
		if [ $EXIT_CODE -gt 0 ]; then
			exit $((EXIT_CODE <= 254 ? EXIT_CODE : 254));
		elif [ $XFAILED -gt 0 ]; then
			exit 255
		else
			exit 0
		fi
}

shellsetedetector() {
	local exit_status=$?
	if [ "$exit_status" != '0' ]; then
		printf >&2 "${CERROR}E: Looks like the testcases ended prematurely with exitcode: ${exit_status}${CNORMAL}\n"
		if [ "$EXIT_CODE" = '0' ]; then
			EXIT_CODE="$exit_status"
		fi
	fi
}

CURRENTTRAP=
addtrap() {
	if [ "$1" = 'prefix' ]; then
		shift
		local -r fmt="$1"; shift
		printf -v CURRENTTRAP "%s $fmt" "$CURRENTTRAP" "$@"
	else
		local -r fmt="$1"; shift
		printf -v CURRENTTRAP "$fmt %s" "$@" "$CURRENTTRAP"
	fi
	trap "shellsetedetector; $CURRENTTRAP exitwithstatus;" 0 HUP INT QUIT ILL ABRT FPE SEGV PIPE TERM
}

setupenvironment() {
	TESTDIRECTORY=$(readlink -f $(dirname $0))
	addtrap '' # unconditionally set up our basic traps

	if [ -n "$APT_TEST_WORKINGDIRECTORY" ]; then
		TMPWORKINGDIRECTORY="$APT_TEST_WORKINGDIRECTORY"
	else
		TMPWORKINGDIRECTORY=$(mktemp -d)
		addtrap 'cd /; rm -rf %q;' "$TMPWORKINGDIRECTORY"
	fi

	msgninfo "Preparing environment for ${CCMD}$(basename $0)${CINFO} in ${TMPWORKINGDIRECTORY}… "

	cd $TMPWORKINGDIRECTORY
	mkdir rootdir aptarchive keys
	cd rootdir
	mkdir -p \
		  etc/apt/apt.conf.d etc/apt/sources.list.d \
		  etc/apt/trusted.gpg.d etc/apt/preferences.d
	mkdir -p var/cache var/lib/apt var/log tmp
	mkdir -p var/lib/rpm
	mkdir -p var/lib/apt/lists/partial var/cache/apt/archives/partial
	cd ..

	{
		echo "Dir \"${TMPWORKINGDIRECTORY}/rootdir\";"
		echo 'Debug::NoLocking "true";'
		echo "Dir::Etc::sourcelist \"${TMPWORKINGDIRECTORY}/rootdir/etc/apt/sources.list\";"

		if [ -n "$METHODSDIR" ] ; then
			echo "Dir::Bin::methods \"$METHODSDIR\";"
		fi
	} > aptconfig.conf

	cat > rootdir/etc/apt/pkgpriorities << END
Important:
  basesystem
Required:
  apt
  systemd-sysvinit
  sysvinit
  openssh-server
Standard:
  postfix
END

	# just an empty sources.list for the beginning
	echo > rootdir/etc/apt/sources.list

	# cleanup the environment a bit
	export PATH="${PATH}:/usr/local/sbin:/usr/sbin:/sbin"
	export LC_ALL=C.UTF-8
	unset LANGUAGE APT_CONFIG
	unset GREP_OPTIONS

	# Initialize rpmdb
	rpmdb --dbpath="$TMPWORKINGDIRECTORY/var/lib/rpm" --initdb

	# Include a special kind of pkg in the db to see how APT processes it
	if [ -n "$APT_TEST_GPGPUBKEY" ]; then
		rpm --dbpath="$TMPWORKINGDIRECTORY/var/lib/rpm" --import "$APT_TEST_GPGPUBKEY"
	fi

	# setup rpm dbpath
	echo "RPM::DBPath \"$TMPWORKINGDIRECTORY/var/lib/rpm\";" \
		 > rootdir/etc/apt/apt.conf.d/99rpmdbpath.conf

	# setup lua stuff
	mkdir -p $TMPWORKINGDIRECTORY/lua/scripts
	mkdir -p $TMPWORKINGDIRECTORY/lua/results
	echo "Dir::Bin::scripts \"$TMPWORKINGDIRECTORY/lua/scripts\";" > rootdir/etc/apt/apt.conf.d/90lua.conf

	# setup bash scripts
	mkdir -p $TMPWORKINGDIRECTORY/bash/scripts
	mkdir -p $TMPWORKINGDIRECTORY/bash/results

	# emulate CDROM (without affecting the config)
	CDROM_URI="$TMPWORKINGDIRECTORY/usr/src/RPM/DISK"
	CDROM_OPTS=(-o Acquire::CDROM::Mount="$CDROM_URI"
				-o Acquire::CDROM::"$CDROM_URI/"::Mount=/bin/true
				-o Acquire::CDROM::"$CDROM_URI/"::UMount=/bin/true
				# this is needed not to statvfs of the emulated CDROM FS:
				-o Debug::identcdrom=true
			   )

	msgdone 'info'
}

# The arch (the machine arch) as detected by rpm or apt
# (and as expected to appear in the APT conf by default).
#
# * `uname -m` gives the base value.
# * rpm-build has its own way to determine the arch, which refines `uname -m`.
#   See: rpmbuild --eval %_arch 2>/dev/null ||:
#   (Packages are built by default for this arch, i.e.,
#   when there is no explicit --target.)
# * rpm has its own way to determine the arch (with more incompatible refinements
#   on ARM compared to rpm-build).
# * APT has its own simplistic way to determine the arch based on `uname -m`.
#
# FIXME: APT should probably use the same value as rpm for APT::Architecture.
# FIXME: rpmbuild's and rpm's ways need to be synchronized, particularly on ARM.
if [ -z "$APT_TEST_DEFAULT_ARCH" ]; then
	APT_TEST_DEFAULT_ARCH="$(uname -m)"
fi

# The arch used for the built packages, repos, etc.
# (May be forced by $APT_TEST_TARGET together with --target.)
if [ -n "$APT_TEST_TARGET" ]; then
	# set by force
	APT_TEST_USED_ARCH="$APT_TEST_TARGET"
else
	# just set it to an appropriate value, if not set by force
	APT_TEST_USED_ARCH="$APT_TEST_DEFAULT_ARCH"
fi

buildpackage() {
	local NAME="$1"

	local target_opt=
	if [ -n "$APT_TEST_TARGET" ]; then
		target_opt=--target="$APT_TEST_TARGET"
	fi

	msgmsg "Building package: ${NAME}"
	HOME="$TMPWORKINGDIRECTORY" rpmbuild \
		--define 'EVR %{?epoch:%epoch:}%{version}-%{release}' \
		--define 'packager test@example.net' \
		--define="_usr $TMPWORKINGDIRECTORY/usr" \
		--root="$TMPWORKINGDIRECTORY" \
		$target_opt \
		-ba "${TESTDIRECTORY}/specs/${NAME}.spec" \
		1>/dev/null
}

builtpackagefile() {
	local -r NAME="$1"

	. "${TESTDIRECTORY}/specs/${NAME}.metainfo"
	# To type less in *.metainfo, assume that the spec's filename coincides with
	# the package's name by default:
	if [ -z "${name-}" ]; then
		name="$NAME"
	fi
	# If arch is not specified in the spec, we know what was given as --target.
	if [ -z "${arch-}" ]; then
		arch="$APT_TEST_USED_ARCH"
	fi

	echo "$TMPWORKINGDIRECTORY/usr/src/RPM/RPMS/${arch}/${name}-${version}-${release}.${arch}.rpm"
}

builtpackagearch() {
	local -r NAME="$1"

	. "${TESTDIRECTORY}/specs/${NAME}.metainfo"
	# If arch is not specified in the spec, we know what was given as --target.
	if [ -z "${arch-}" ]; then
		arch="$APT_TEST_USED_ARCH"
	fi

	echo "${arch}"
}

builtpackageversion() {
	local -r NAME="$1"

	. "${TESTDIRECTORY}/specs/${NAME}.metainfo"

	echo "${version}-${release}"
}

installpackage() {
	local NAME="$1"

	local PKGFILE="$(builtpackagefile "$NAME")"

	msgmsg "Installing package via rpm: $(basename "$PKGFILE")"
	rpm --dbpath="$TMPWORKINGDIRECTORY/var/lib/rpm" \
		--nodeps \
		-i "$PKGFILE" \
		1>/dev/null
}

aptgetinstallpackage() {
	local NAME="$1"

	local PKGFILE="$(builtpackagefile "$NAME")"

	msgmsg "Installing package via apt-get: $(basename "$PKGFILE")"
	aptget install "$PKGFILE" \
		   1>/dev/null
}

checkdiff() {
	local DIFFTEXT="$(command diff -u "$@" | sed -e '/^---/ d' -e '/^+++/ d' -e '/^@@/ d')"
	if [ -n "$DIFFTEXT" ]; then
		echo >&2
		echo >&2 "$DIFFTEXT"
		return 1
	else
		return 0
	fi
}

testfileequal() {
	local FILE="$1"
	shift
	msgtest 'Test for correctness of file' "$FILE"
	if [ -z "$*" ]; then
		echo -n '' | checkdiff $FILE - && msgpass || msgfail
	else
		echo "$*" | checkdiff $FILE - && msgpass || msgfail
	fi
}

testempty() {
	msgtest 'Test for no output of' "$*"
	local COMPAREFILE="${TMPWORKINGDIRECTORY}/rootdir/tmp/testempty.comparefile"
	if $* >$COMPAREFILE 2>&1 && test ! -s $COMPAREFILE; then
		msgpass
	else
		cat $COMPAREFILE
		msgfail
	fi
}

testequal() {
	local MSG='Test of equality of'
	if [ "$1" = '--nomsg' ]; then
		MSG=''
		shift
	fi

	local COMPAREFILE="${TMPWORKINGDIRECTORY}/rootdir/tmp/testequal.comparefile"
	echo "$1" > $COMPAREFILE
	shift

	if [ -n "$MSG" ]; then
		msgtest "$MSG" "$*"
	fi
	"$@" 2>&1 | checkdiff $COMPAREFILE - && msgpass || msgfail
}

testscriptoutput() {
	local MSG="$1"
	shift

	msgtest 'Test of output of' "$MSG"

	testequal --nomsg "$@"
}

testscriptnooutput() {
	local MSG="$1"
	shift

	msgtest 'Test for no output of' "$MSG"

	[ ! -e "$1" ] && msgpass || msgfail
}

testregexmatch() {
	local MSG='Test of regex match of'
	if [ "$1" = '--nomsg' ]; then
		MSG=''
		shift
	fi

	local COMPAREMSG="$1"
	shift

	if [ -n "$MSG" ]; then
		msgtest "$MSG" "$*"
	fi

	local RESULTFILE="${TMPWORKINGDIRECTORY}/rootdir/tmp/testregexmatch.resultfile"

	set +e
	"$@" &> $RESULTFILE
	set -e

	if [[ "$(cat $RESULTFILE)" =~ ^$COMPAREMSG$ ]] ; then
		msgpass
	else
		local COMPAREFILE="${TMPWORKINGDIRECTORY}/rootdir/tmp/testregexmatch.comparefile"
		echo "$COMPAREMSG" > $COMPAREFILE
		checkdiff $COMPAREFILE $RESULTFILE || true
		msgfail
	fi
}

match_and_delete() {
	local -r PATTERN="$1"; shift
	local -r VARNAME="$1"; shift

	[[ "${!VARNAME}" =~ ^(|.*$'\n')$PATTERN(|$'\n'(.*))$ ]] &&
		printf -v "$VARNAME" '%s%s' "${BASH_REMATCH[1]}" "${BASH_REMATCH[-1]}"
}

testpartsexhaust() {
	local MSG='Test that regex parts exhaust the output of'
	if [ "$1" = '--nomsg' ]; then
		MSG=''
		shift
	fi

	local -a REGEXPARTS
	while [ "$1" != '--' ]; do
		REGEXPARTS=("${REGEXPARTS[@]}" "$1"); shift
		: ${1?"Missing '--' arg." 'Usage: testpartsexhaust REGEX.. -- CMD'}
	done
	# The loop would fail if there was no '--' arg.
	shift # the '--' arg

	if [ -n "$MSG" ]; then
		msgtest "$MSG" "$*"
	fi

	local RESULTFILE="${TMPWORKINGDIRECTORY}/rootdir/tmp/testregexmatch.resultfile"

	set +e
	"$@" &> $RESULTFILE
	set -e
	local RESULT="$(cat "$RESULTFILE")"

	local REGEXPART
	for REGEXPART in "${REGEXPARTS[@]}"; do
		if ! match_and_delete "$REGEXPART" RESULT; then
			echo -e "\n${CINFO}A part couldn't be matched with the remaining result:${CNORMAL}"
			echo "$RESULT"
			echo -e "${CINFO}The part that didn't match:${CNORMAL}"
			echo "$REGEXPART"
			msgfail
			return
		fi
	done
	if [ "$RESULT" != '' ]; then
		echo -e "\n${CINFO}The remaining unmatched result:"
		echo "$RESULT"
		msgfail
	else
		msgpass
	fi
}

skiplines() {
	local count="$1"
	shift

	"$@" 2>&1 | tail +"$count"
}

testequalor2() {
	local COMPAREFILE1="${TMPWORKINGDIRECTORY}/rootdir/tmp/testequalor2.comparefile1"
	local COMPAREFILE2="${TMPWORKINGDIRECTORY}/rootdir/tmp/testequalor2.comparefile2"
	local COMPAREAGAINST="${TMPWORKINGDIRECTORY}/rootdir/tmp/testequalor2.compareagainst"
	echo "$1" > $COMPAREFILE1
	echo "$2" > $COMPAREFILE2
	shift 2
	msgtest 'Test for equality OR of' "$*"
	$* >$COMPAREAGAINST 2>&1 || true
	if checkdiff $COMPAREFILE1 $COMPAREAGAINST >/dev/null 2>&1 || \
		checkdiff $COMPAREFILE2 $COMPAREAGAINST >/dev/null 2>&1
	then
		msgpass
	else
		echo -ne "\n${CINFO}Diff against OR 1${CNORMAL}"
		checkdiff $COMPAREFILE1 $COMPAREAGAINST || true
		echo -n "${CINFO}Diff against OR 2${CNORMAL}"
		checkdiff $COMPAREFILE2 $COMPAREAGAINST || true
		msgfail
	fi
}

testshowvirtual() {
	local VIRTUAL="N: Can't select versions from package '$1' as it is purely virtual"
	local PACKAGE="$1"
	shift
	while [ -n "$1" ]; do
		VIRTUAL="${VIRTUAL}
N: Can't select versions from package '$1' as it is purely virtual"
		PACKAGE="${PACKAGE} $1"
		shift
	done
	msgtest 'Test for virtual packages' "apt-cache show $PACKAGE"
	VIRTUAL="${VIRTUAL}
N: No packages found"
	local COMPAREFILE="${TMPWORKINGDIRECTORY}/rootdir/tmp/testshowvirtual.comparefile"
	aptcache show -q=0 $PACKAGE 2>&1 | checkdiff $COMPAREFILE - &&
		msgpass || msgfail
}

testnopackage() {
	msgtest 'Test for non-existent packages' "apt-cache show $*"
	local SHOWPKG="$(aptcache show "$@" 2>&1 | grep '^Package: ')"
	if [ -n "$SHOWPKG" ]; then
		echo >&2
		echo >&2 "$SHOWPKG"
		msgfail
	else
		msgpass
	fi
}

testpkginstalled() {
	msgtest 'Test that package(s) are installed with' "rpm -q $*"

	local result=0

	set +e
	rpm --dbpath="$TMPWORKINGDIRECTORY/var/lib/rpm" -q "$@" >/dev/null
	result=$?
	set -e

	if [ $result -eq 0 ] ; then
		msgpass
	else
		msgfail
	fi
}

getpackageversion() {
	local result=

	set +e
	result=$(rpm --dbpath="$TMPWORKINGDIRECTORY/var/lib/rpm" \
				 -q --qf '%{EVR}\n' "$@" \
				 2>/dev/null)
	set -e

	echo $result
}

testpkgnotinstalled() {
	msgtest 'Test that package(s) are not installed with' "rpm -q $*"

	local result=0

	set +e
	rpm --dbpath="$TMPWORKINGDIRECTORY/var/lib/rpm" -q "$@" >&2 2>/dev/null
	result=$?
	set -e

	if [ $result -ne 0 ] ; then
		msgpass
	else
		msgfail
	fi
}

testsuccess() {
	if [ "$1" = '--nomsg' ]; then
		shift
	else
		msgtest 'Test for successful execution of' "$*"
	fi
	local OUTPUT="${TMPWORKINGDIRECTORY}/rootdir/tmp/testsuccess.output"
	if "$@" >${OUTPUT} 2>&1; then
		msgpass
	else
		echo >&2
		cat >&2 $OUTPUT
		msgfail
	fi
}

testfailure() {
	if [ "$1" = '--nomsg' ]; then
		shift
	else
		msgtest 'Test for failure in execution of' "$*"
	fi
	local OUTPUT="${TMPWORKINGDIRECTORY}/rootdir/tmp/testfailure.output"
	if $@ >${OUTPUT} 2>&1; then
		echo >&2
		cat >&2 $OUTPUT
		msgfail
	else
		msgpass
	fi
}

generaterepository() {
	local ORIG_DIR="$1"
	local REPO_DIR="$2"
	local REPO_DATE="${3-}"

	local label="$GB_REPO_LABEL"
	if [ -z "$label" ]; then
		label="apt-tests"
	fi
	local description="$GB_REPO_DESCRIPTION"
	if [ -z "$description" ]; then
		description="ALT Linux $label"
	fi
	local date_s="$(date +%s)"
	local arch="$APT_TEST_USED_ARCH"
	local comps="${label}"

	if [ -n "$REPO_DATE" ] ; then
		date_s="$REPO_DATE"
	fi

	local archive="$GB_REPO_ARCHIVE"
	if [ -z "$archive" ]; then
		archive="$description"
	fi
	local codename="$GB_REPO_CODENAME"
	if [ -z "$codename" ]; then
		codename="$date_s"
	fi
	local origin="$GB_REPO_ORIGIN"
	if [ -z "$origin" ]; then
		origin="ALT Linux Team"
	fi
	local suite="$GB_REPO_SUITE"
	if [ -z "$suite" ]; then
		suite="$label"
	fi
	local version="$GB_REPO_VERSION"
	if [ -z "$version" ]; then
		version="$date_s"
	fi

	# The compression opts can be forced from the environment.
	local compression_opts="$APT_TEST_BASEDIR_COMPRESSION_OPTS"
	if [ -z "$compression_opts" ]; then
		# By default, choose minimal required compressions
		# for the chosen method to work without errors.
		# (FIXME: fix APT so that the used compression doesn't matter!)
		case "$APT_TEST_METHOD" in

			http*) compression_opts='--bz2 --no-xz'
			   ;;

			cdrom*) compression_opts='--bz2 --no-xz'
			   ;;

			*) compression_opts='--no-bz2 --no-xz'
			   ;;

		esac
	fi

	rm -rf "$REPO_DIR"
	for dir in ${arch} noarch ; do
		mkdir -p "${REPO_DIR}/${dir}/RPMS.${label}"
		mkdir -p "${REPO_DIR}/${dir}/base"
		stat "${ORIG_DIR}/${dir}/"*.rpm &>/dev/null &&
			cp "${ORIG_DIR}/${dir}/"*.rpm "${REPO_DIR}/${dir}/RPMS.${label}"/
	done

	mkdir -p "${TMPWORKINGDIRECTORY}/cache"

	for dir in ${arch} noarch ; do
		genbasedir \
			--cachedir="${TMPWORKINGDIRECTORY}/cache" \
			--architecture="$dir" \
			--architectures="$dir" \
			--archive="$archive" \
			--codename="$codename" \
			--description="$description" \
			--label="$label" \
			--origin="$origin" \
			--suite="$suite" \
			--version="$version" \
			--topdir="$REPO_DIR" \
			--changelog-since='@1' \
			--flat --no-oldhashfile $compression_opts --mapi \
			$dir $comps

		if [ -n "$REPO_DATE" ] ; then
			touch -t $(date --date=@${REPO_DATE} '+%Y%m%d%H%M.%S') \
				  "${REPO_DIR}/${dir}/base/"*
		fi
	done
}

generaterepository_and_switch_sources() {
	local -r ORIG_DIR="$1"
	local REPO_DIR # will be set depending on the method
	local -r REPO_DATE="${2-}"

	case "$APT_TEST_METHOD" in

		file)
			REPO_DIR="$TMPWORKINGDIRECTORY/usr/src/RPM/REPO"

			generaterepository "$ORIG_DIR" "$REPO_DIR" "$REPO_DATE"

			# overwrite old sources.list
			cat >| rootdir/etc/apt/sources.list <<- END
				rpm $APT_TEST_METHOD://$REPO_DIR $APT_TEST_USED_ARCH apt-tests
				rpm $APT_TEST_METHOD://$REPO_DIR noarch apt-tests
			END
			;;

		http|https|https_invalid_cert_hostname)
			REPO_DIR="$TMPWORKINGDIRECTORY/nginx/repo"

			generaterepository "$ORIG_DIR" "$REPO_DIR" "$REPO_DATE"

			# overwrite old sources.list
			cat >| rootdir/etc/apt/sources.list <<- END
				rpm ${APT_TEST_METHOD%%_*}://localhost:$((8080+PARALLEL_SLOT))/ $APT_TEST_USED_ARCH apt-tests
				rpm ${APT_TEST_METHOD%%_*}://localhost:$((8080+PARALLEL_SLOT))/ noarch apt-tests
			END
			;;

		cdrom|cdrom_missing_release)

			generaterepository "$ORIG_DIR" "$CDROM_URI" "$REPO_DATE"
			mkdir "$CDROM_URI"/.disk
			# trailing whitespace here might be misinterpreted
			echo "Distribution $REPO_DATE Disk" >"$CDROM_URI"/.disk/info

			# DEBUG: Let's have an idea of the FS tree there:
			#ls -laR "$CDROM_URI"

			case "$APT_TEST_METHOD" in
				cdrom_missing_release)
					find "$CDROM_URI"/*/base -name 'release*' -print -delete
					;;
			esac

			# overwrite old sources.list
			echo >| rootdir/etc/apt/sources.list
			aptcdrom add
			;;

		*)
			msgdie 'unknown $APT_TEST_METHOD'
			;;

	esac
}

createluascript() {
	local APTNAME="$1"
	local SCRIPTFILENAME="$2"

	echo "$APTNAME:: \"${SCRIPTFILENAME}.lua\";" > rootdir/etc/apt/apt.conf.d/91lua-${SCRIPTFILENAME}.conf
	cat > $TMPWORKINGDIRECTORY/lua/scripts/${SCRIPTFILENAME}.lua << ENDSCRIPT
f = io.open("$TMPWORKINGDIRECTORY/lua/results/${SCRIPTFILENAME}.result", "a")
f:write("$APTNAME called\n")
f:close()
ENDSCRIPT
}

createbashscript() {
	local APTNAME="$1"
	local SCRIPTFILENAME="$2"

	echo "$APTNAME:: \"$TMPWORKINGDIRECTORY/bash/scripts/${SCRIPTFILENAME}.sh\";" > rootdir/etc/apt/apt.conf.d/92bash-${SCRIPTFILENAME}.conf
	cat > $TMPWORKINGDIRECTORY/bash/scripts/${SCRIPTFILENAME}.sh << ENDSCRIPT
#!/bin/bash
echo "$APTNAME called" >> "$TMPWORKINGDIRECTORY/bash/results/${SCRIPTFILENAME}.result"
ENDSCRIPT

	chmod +x $TMPWORKINGDIRECTORY/bash/scripts/${SCRIPTFILENAME}.sh
}

nginxsetuphttp() {
	mkdir -p $TMPWORKINGDIRECTORY/nginx ||:
	mkdir -p $TMPWORKINGDIRECTORY/nginx/tmp ||:

cat >> $TMPWORKINGDIRECTORY/nginx/nginx.conf << ENDCONFIG
error_log stderr;
worker_processes 1;
pid $TMPWORKINGDIRECTORY/nginx/nginx.pid;

events {
	worker_connections  1024;
}

http {
	client_body_temp_path $TMPWORKINGDIRECTORY/nginx/tmp/client_body;
	fastcgi_temp_path $TMPWORKINGDIRECTORY/nginx/tmp/fastcgi_temp;
	proxy_temp_path $TMPWORKINGDIRECTORY/nginx/tmp/proxy_temp;
	scgi_temp_path $TMPWORKINGDIRECTORY/nginx/tmp/scgi_temp;
	uwsgi_temp_path $TMPWORKINGDIRECTORY/nginx/tmp/uwsgi_temp;

	include             /etc/nginx/mime.types;
	default_type        application/octet-stream;

	sendfile off;

	keepalive_timeout   65;

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_prefer_server_ciphers on;
	access_log stderr;
	error_log stderr;

	server {
		listen $((8080+PARALLEL_SLOT));
		server_name localhost localhost.localdomain;

		location / {
			root $TMPWORKINGDIRECTORY/nginx/repo;
			autoindex on;
		}
	}
}
ENDCONFIG
}

nginxsetuphttps() {
	mkdir -p $TMPWORKINGDIRECTORY/nginx ||:
	mkdir -p $TMPWORKINGDIRECTORY/nginx/tmp ||:

	cat >> $TMPWORKINGDIRECTORY/nginx/nginx.conf << ENDCONFIG
error_log stderr;
worker_processes 1;
pid $TMPWORKINGDIRECTORY/nginx/nginx.pid;

events {
	worker_connections  1024;
}

http {
	client_body_temp_path $TMPWORKINGDIRECTORY/nginx/tmp/client_body;
	fastcgi_temp_path $TMPWORKINGDIRECTORY/nginx/tmp/fastcgi_temp;
	proxy_temp_path $TMPWORKINGDIRECTORY/nginx/tmp/proxy_temp;
	scgi_temp_path $TMPWORKINGDIRECTORY/nginx/tmp/scgi_temp;
	uwsgi_temp_path $TMPWORKINGDIRECTORY/nginx/tmp/uwsgi_temp;

	include             /etc/nginx/mime.types;
	default_type        application/octet-stream;

	sendfile off;

	keepalive_timeout   65;

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_prefer_server_ciphers on;
	access_log stderr;
	error_log stderr;

	server {
		listen $((8080+PARALLEL_SLOT)) ssl;
		server_name localhost localhost.localdomain;

		ssl_certificate	$TMPWORKINGDIRECTORY/nginx/cert.crt;
		ssl_certificate_key	$TMPWORKINGDIRECTORY/nginx/cert.key;

		ssl_session_cache	builtin:1000	shared:SSL:10m;
		ssl_protocols TLSv1.2;
		ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
		ssl_prefer_server_ciphers on;

		location / {
			root $TMPWORKINGDIRECTORY/nginx/repo;
			autoindex on;
		}
	}
}
ENDCONFIG
}

wait_for_file() {
	# The message 'Waiting...' is intentionally printed regardless of $MSGLEVEL;
	# otherwise it would be difficult to see why the process is hanging;
	# it can appear only in extra-ordinary situations (under heavy load).
	[ -s "$1" ] ||
		printf >&2 'Waiting for %s\n' "$1" &&
		while ! [ -s "$1" ]; do
			sleep 0.5
		done
}

nginxstart() {
	local -r NGINXPIDFILE=$TMPWORKINGDIRECTORY/nginx/nginx.pid
	local -r NGINXLOG=$TMPWORKINGDIRECTORY/nginx/process-stderr.log

	# The wait_for_file workaround would not be needed if nginx fully conformed
	# to the "traditional UNIX forking daemon" behavior described
	# in systemd.service(5); unfortunately for us, the upstream hasn't "fixed"
	# this race[1], although a patch for synchronizing the exit of the parent
	# with the creation of the pidfile is available[2].
	# [1]: https://trac.nginx.org/nginx/ticket/1897
	# [2]: http://mailman.nginx.org/pipermail/nginx-ru/2017-November/060628.html
	/usr/sbin/nginx -c $TMPWORKINGDIRECTORY/nginx/nginx.conf -p $TMPWORKINGDIRECTORY &>>"$NGINXLOG" &&
		wait_for_file "$NGINXPIDFILE" &&
		local -r NGINXPID="$(cat "$NGINXPIDFILE" 2>>"$NGINXLOG")" &&
		[ -n "$NGINXPID" ] ||
			{ { echo NGINXLOG:; cat "$NGINXLOG"; } >&2 ||:
			  msgdie 'nginx failed to start normally'
			}

	addtrap 'prefix' \
			'kill -TERM %q ||:; [ "$EXIT_CODE" = 0 ] || if [ -e %q ]; then echo NGINXLOG:; cat %q ||:; fi;' \
			"$NGINXPID" \
			"$NGINXLOG"
}
